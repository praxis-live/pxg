@ ./hsv video:gl:p2d {
  #%graph.x 0
  #%graph.y 0
  .code "

    @P(1) @Type.Number(min=0, max=360, def=0) double hue;
    @P(2) @Type.Number(min=0, max=2, def=1) double saturation;
    @P(3) @Type.Number(min=0, max=2, def=1) double value;
    
    void updateUniforms() \{
         shader.set(\"hue\", hue);
         shader.set(\"saturation\", saturation);
         shader.set(\"value\", value);
    \}

    
    // BOILERPLATE BELOW
    @In(0)
    PImage in;
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        \}
        shader(shader);
        updateUniforms();
        image(in, 0, 0);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

"
  .fragment "// https://gamedev.stackexchange.com/a/59808
uniform sampler2D texture;

uniform vec2 texOffset;

uniform float hue;
uniform float saturation;
uniform float value;

varying vec4 vertColor;
varying vec4 vertTexCoord;

vec3 rgb2hsv(vec3 c) \{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
\}

vec3 hsv2rgb(vec3 c) \{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
\}

void main() \{
    vec4 textureColor = texture2D(texture, vertTexCoord.st) * vertColor;
    vec3 fragRGB = textureColor.rgb;
    vec3 fragHSV = rgb2hsv(fragRGB).xyz;
    fragHSV.x += hue / 360.0;
    fragHSV.y *= saturation;
    fragHSV.z *= value;
    fragRGB = hsv2rgb(fragHSV);
    gl_FragColor = vec4(fragRGB, textureColor.a);
\}"
}
