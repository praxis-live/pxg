@ ./solarize video:gl:p2d {
  #%graph.x 0
  #%graph.y 0
  #%graph.comment Solarizes an image\nby VIDVOX\nCategories : Glitch
  .code "

    @In(1)
    PImage in;
    @P(-2)
    @Type.String(mime = GLSL_VERTEX_MIME, template = DEFAULT_VERTEX_SHADER)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String vertex;
    @P(-1)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;
    
    @P(1)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double centerBrightness;
    @P(2)
    @Type.Number(min = 0, max = 4, def = 1)
    double powerCurve;
    @P(3)
    @Type.Number(min = 0, max = 1, def = 0)
    double colorize;
    @P(4)
    @Type.Boolean(def = false)
    boolean inverse;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
    \}

    @Override
    public void draw() \{

        if (shader == null) \{
            shader = createShader(
                    vertex.isEmpty() ? DEFAULT_VERTEX_SHADER : vertex,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        \}
        shader(shader);
        shader.set(\"RENDERSIZE\", width, height);
        updateUniforms();
        noStroke();
        beginShape(QUADS);
        vertex(0, 0, 0, 0);
        vertex(width, 0, 1, 0);
        vertex(width, height, 1, 1);
        vertex(0, height, 0, 1);
        endShape();
        resetShader();

    \}

    void updateUniforms() \{
        shader.set(\"inputImage\", in);
        shader.set(\"centerBrightness\", centerBrightness);
        shader.set(\"powerCurve\", powerCurve);
        shader.set(\"colorize\", colorize);
        shader.set(\"inverse\", inverse);
    \}

    void updateShader() \{
        shader = null;
    \}
"
  .vertex "uniform mat4 transformMatrix;
uniform mat4 inputImageMatrix;

attribute vec4 position;
attribute vec2 texCoord;

varying vec2 isf_FragNormCoord;
varying vec2 isf_FragCoord;

void main() \{
  isf_FragNormCoord = texCoord;
  isf_FragCoord = position.xy;
  gl_Position = transformMatrix * position;
\}"
  .fragment "uniform sampler2D inputImage;
uniform mat4 inputImageMatrix;

uniform float centerBrightness;
uniform float powerCurve;
uniform float colorize;
uniform bool inverse;

varying vec2 isf_FragNormCoord;
varying vec2 isf_FragCoord;

vec3 rgb2hsv(vec3 c)	\{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);
	vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);
	
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
\}

vec3 hsv2rgb(vec3 c)	\{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
\}




void main()
\{
	vec4		inColor = texture2D(inputImage, (inputImageMatrix * vec4(isf_FragNormCoord, 1.0, 1.0)).xy); 
	vec4		hslColor;
	vec4		outColor;
	
	//	convert to HSV
	hslColor.rgb = rgb2hsv(inColor.rgb);
	outColor.rgb = hslColor.rgb;
	outColor.a = inColor.a;
	
	//	drop the saturation
	//outColor.g = 0.0;
	
	//	adjust the brightness curve
	outColor.b = pow(outColor.b, powerCurve);
	outColor.b = (outColor.b < centerBrightness) ? (1.0 - outColor.b / centerBrightness) : (outColor.b - centerBrightness) / centerBrightness;
	outColor.b = (inverse) ? 1.0 - outColor.b : outColor.b;
	
	outColor.g = (inverse) ? outColor.g * (1.0-hslColor.b) * colorize : outColor.g * hslColor.b * colorize;
	
	//	convert back to rgb
	outColor.rgb = hsv2rgb(outColor.rgb);
	
	gl_FragColor = outColor;
\}




"
}
