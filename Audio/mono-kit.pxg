@ ./mono-kit audio:custom {
  #%graph.x 0
  #%graph.y 0
  .code "

    @Out(1)
    AudioOut out;
    
    @P(1) @OnChange(\"updateTables\") @Config.Port(false)
    AudioTable sample1;
    @P(2) @OnChange(\"updateTables\") @Config.Port(false)
    AudioTable sample2;
    @P(3) @OnChange(\"updateTables\") @Config.Port(false)
    AudioTable sample3;
    @P(4) @OnChange(\"updateTables\") @Config.Port(false)
    AudioTable sample4;
    @P(5) @OnChange(\"updateTables\") @Config.Port(false)
    AudioTable sample5;
    @P(6) @OnChange(\"updateTables\") @Config.Port(false)
    AudioTable sample6;

    @T(1) Trigger play1;
    @T(2) Trigger play2;
    @T(3) Trigger play3;
    @T(4) Trigger play4;
    @T(5) Trigger play5;
    @T(6) Trigger play6;
    
    @P(7) @Type.Number(min=0, max=1, def=1)
    Property level1;
    @P(8) @Type.Number(min=0, max=1, def=1)
    Property level2;
    @P(9) @Type.Number(min=0, max=1, def=1)
    Property level3;
    @P(10) @Type.Number(min=0, max=1, def=1)
    Property level4;
    @P(11) @Type.Number(min=0, max=1, def=1)
    Property level5;
    @P(12) @Type.Number(min=0, max=1, def=1)
    Property level6;
    
    @UGen
    Player pl1, pl2, pl3, pl4, pl5, pl6;
    @UGen
    Gain g1, g2, g3, g4, g5, g6;

    @Override
    public void setup() \{
        updateTables();
        link(
                add(
                        link(pl1, g1),
                        link(pl2, g2),
                        link(pl3, g3),
                        link(pl4, g4),
                        link(pl5, g5),
                        link(pl6, g6)
                ),
                out     
        );
        
        play1.link(pl1::play);
        play2.link(pl2::play);
        play3.link(pl3::play);
        play4.link(pl4::play);
        play5.link(pl5::play);
        play6.link(pl6::play);
        
        level1.values().map(l -> l*l).link(g1::level);
        level2.values().map(l -> l*l).link(g2::level);
        level3.values().map(l -> l*l).link(g3::level);
        level4.values().map(l -> l*l).link(g4::level);
        level5.values().map(l -> l*l).link(g5::level);
        level6.values().map(l -> l*l).link(g6::level);
    \}
    
    void updateTables() \{
        pl1.table(sample1);
        pl2.table(sample2);
        pl3.table(sample3);
        pl4.table(sample4);
        pl5.table(sample5);
        pl6.table(sample6);
    \}
    
"
}

